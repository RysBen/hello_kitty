#f(n)=f(n-1)+f(n-2); f(0)=0; f(1)=1

#directly, inefficient, O(2^n)
def f(n):
    if n==0:
        return 0
    elif n==1:
        return 1
    else:
        return f(n-1)+f(n-2)

#top-down, O(n)
def f(n):
    memo=[-1]*(n+1)
    if n == 0:
        return 0
    if n == 1:
        return 1
    if memo[n] == -1:
        memo[n]=f(n-1)+f(n-2)
    return memo[n]

#down-top, O(n)
def f(n):
    memo=[-1]*(n+1)
    memo[0]=0
    memo[1]=1
    for i in range(2,n+1):
        memo[i]=memo[i-1]+memo[i-2]
    return memo[n]
